<templateSet group="JavaScript">
  <template name="forof" value="for (let $VAR$ of $ARRAY$) {&#10;  $END$&#10;}" description="Iterate (for..of) - ES2015" toReformat="false" toShortenFQNames="true">
    <variable name="ARRAY" expression="jsArrayVariable()" defaultValue="&quot;array &quot;" alwaysStopAt="true" />
    <variable name="VAR" expression="jsSuggestVariableName()" defaultValue="&quot;o&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="forin" value="for (let $VAR$ in $ARRAY$) {&#10;  $END$&#10;}" description="Iterate (for..in)" toReformat="false" toShortenFQNames="true">
    <variable name="ARRAY" expression="jsArrayVariable()" defaultValue="&quot;array &quot;" alwaysStopAt="true" />
    <variable name="VAR" expression="jsSuggestVariableName()" defaultValue="&quot;o&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="forarray" value="for ($VARKIND$ $INDEX$ = 0; $INDEX$ &lt; $ARRAY$.length; $INDEX$++) {&#10;  $VARKIND2$ $VAR$ = $ARRAY$[$INDEX$];&#10;  $END$&#10;}" description="Iterate elements of array" toReformat="true" toShortenFQNames="true">
    <variable name="VARKIND" expression="jsSuggestDefaultVariableKind(false)" defaultValue="var" alwaysStopAt="false" />
    <variable name="INDEX" expression="jsSuggestIndexName()" defaultValue="&quot;i&quot;" alwaysStopAt="true" />
    <variable name="ARRAY" expression="jsArrayVariable()" defaultValue="&quot;array&quot;" alwaysStopAt="true" />
    <variable name="VARKIND2" expression="jsSuggestDefaultVariableKind()" defaultValue="var" alwaysStopAt="false" />
    <variable name="VAR" expression="jsSuggestVariableName()" defaultValue="&quot;o&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="asfunc" value="async function $name$ ($param$) {&#10;    let $varname$;&#10;    $END$&#10;&#10;    return $varname$;&#10;}" description="Async Function" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="param" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="varname" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="profunc" value="function name (p) {&#10;  return new Promise(function (resolve, reject) {&#10;    var $varname$ = $vartype$;&#10;    &#10;    $END$&#10;    &#10;    resolve($varname$);&#10;  });&#10;  &#10;}" description="Promise Function" toReformat="false" toShortenFQNames="true">
    <variable name="varname" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="vartype" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rpfunc" value="async function $name$ ($param$) {&#10;    var $result$ = $vartype$;&#10;    &#10;    let response = await rp($param$);&#10;&#10;    if (response.statusCode === 200) {&#10;      $END$&#10;&#9;  &#10;      winston.log('info', 'API: List Attributes - ' + config.messages.statusCode +&#10;        response.statusCode);      &#10;    } else {&#10;      winston.log('error', 'API: ' + config.messages.requestError +&#10;        response.messageerror + ' - ' + config.messages.statusCode + response.statusCode + ' - URL: ' + $param$);&#10;      winston.log('error', 'Header: ' + config.messages.statusCode +&#10;        response.rawHeaders);&#9;&#9;&#10;    }&#10;  &#10;  //await delay(1000);&#10;  }&#10;&#10;  return $result$;&#10;}" description="Request Promise Function" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="param" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="result" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="vartype" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="routerpromise" value="router.$VERB$('/', function (req, res, next) {&#10;  $function$($param1$).then(function ($param2$) {&#10;    res.json($param2$);&#10;  });&#10;});&#10;" description="Router with Promise Function" toReformat="false" toShortenFQNames="true">
    <variable name="VERB" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="function" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="param1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="param2" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="routerfunction" value="router.$VERB$('/', function (req, res, next) {&#10;  $END$&#10;  res.json($param$);&#10;});&#10;" description="Router Function" toReformat="false" toShortenFQNames="true">
    <variable name="VERB" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="param" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="reqoptions" value="let reqOptions$SUFFIX$ = {&#10;  url: config.apiEndpoints.$ENDPOINT$ + '&amp;page=1&amp;per_page=100',&#10;  headers: config.auth.authHeader,&#10;  json: true,&#10;  resolveWithFullResponse: true&#10;};&#10;$END$&#10;" description="Request Options Object" toReformat="false" toShortenFQNames="true">
    <variable name="SUFFIX" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENDPOINT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="getUrl" value="function $FUNCNAME$ ($PARAM$) {&#10;  return new Promise(function (resolve, reject) {&#10;    $END$&#10;    let reqAttrOptions = {&#10;      method: '$METHOD$',&#10;      body: {},&#10;      url: jsonUtils.replacePlaceholder(config.apiEndpoints.$ENDPOINT$, $VALUEREPLACE$),&#10;      headers: config.auth.authHeader,&#10;      json: true,&#10;      resolveWithFullResponse: true&#10;    };&#10;&#10;    resolve($RESULT$);&#10;  });&#10;}" description="Build Request Options Template" toReformat="false" toShortenFQNames="true">
    <variable name="FUNCNAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAM" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="METHOD" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENDPOINT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUEREPLACE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="RESULT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="pnf" value="return new Promise(function (resolve, reject) { });" description="Promise New Function" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>